# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: Default
  demands: 
    Server_Unity_Build

steps:
#cleanup for unity build
- task: DeleteFiles@1
  name: CleanupOldArtifact
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**/*'

#get the previously secured library (if any) for performance reasons
- task: DeleteFiles@1
  name: DeleteOldLibrary
  inputs:
    SourceFolder: '(Build.Repository.LocalPath)\Earthquake VR\Library'
    Contents: '**/*'
- task: CmdLine@2
  name: ImportLibrary
  inputs:
    script: 'if EXIST "$(Build.BinariesDirectory)\LibraryBackup" move /y "$(Build.BinariesDirectory)\LibraryBackup" "$(Build.Repository.LocalPath)\Earthquake VR\Library"'

- task: UnityActivateLicenseTask@1
  name: ActivateUnityLicense
  inputs:
    username: '$(Unity.Username)'
    password: '$(Unity.Password)'
    serial: '$(Unity.Serial)'
    unityProjectPath: 'Earthquake VR'

#unity PC build
- task: UnityBuildTask@3
  inputs:
    buildTarget: 'Win64'
    unityProjectPath: 'Earthquake VR'
    outputPath: '$(Build.BinariesDirectory)\Build'
    outputFileName: 'Earthquake VR'

#Delete DoNotShip folders
- task: DeleteFiles@1
  name: DeleteUnusedFiles
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)\Build'
    Contents: '?(*_DoNotShip)'

#Backup the library for next build
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)\Earthquake VR\Library'
    Contents: '**\*'
    TargetFolder: '$(Build.BinariesDirectory)\LibraryBackup'
    CleanTargetFolder: true

#create the installer
- task: BatchScript@1
  name: StartPackaging 
  inputs:
    filename: 'Installer/createsetup.bat'
    arguments: '"$(Build.BinariesDirectory)\Build\*" "$(Build.ArtifactStagingDirectory)\SetupCreation" "0.1.$(Build.BuildNumber)"'
    workingFolder: '$(Build.Repository.LocalPath)\Installer'

#upload artifact
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\SetupCreation'
    ArtifactName: 'drop'
    publishLocation: 'Container'